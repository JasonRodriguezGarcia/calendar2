npm create vite@latest frontend

cd frontend    
npm install    
npm run dev

npm i react-big-calendar

npm i date-fns

********

    git add .
    git commit -m "first commit"
    git remote add origin https://github.com/JasonRodriguezGarcia/calendar2.git
    git branch -M main
    git push -u origin main

***************

npm install @mui/material @emotion/react @emotion/styled @mui/icons-material
npm install @mui/x-date-pickers @date-io/date-fns

***************
npm install react-router-dom

***************

abrir el contenedor de docker de nuestro compose.yml (que ya está configurado con postgres-db y pg_admin)
    docker compose up -d

Ya tenemos funcionando en segundo plano la bbdd postgresql y pg_admin para su administración
Para abrir la administracion de la bbdd con pg_admin, abrir en navegador
    http://localhost:5050/

postgresql
en navegador ponemos localhost:5050 y entramos en la interfaz de postgresql del fichero docker_composer
OJO AL ENTRAR SELECCIONAR EN ESPAÑOL EN LA OPCION DE ABAJO
entrar con
    jasonrodriguezempleo@gmail.com
    postgres  (contraseña del fichero docker_composer)

dentro
    boton derecho en servers (a la izq)
    register - servidor
    en pestaña general
    nombre postgres
    conexion
    nombre postgres
    usuario: postgres
    contraseña : postgresj
    boton SALVAR

a la izq
    servers
        postgres
            Bases de datos
            Boton derecho en Bases de datos - crear - base de datos
            nombre: demo
            salvar
a la izq
dentro de SERVERS aparecerá un icono de POSTGRES y lo abrimos 
bases de datos boton DERECHO - CREAR - BASE DE DATOS
Base de datos pondremos: demo
boton SALVAR


***************
fichero de mern_4 0leemeDia26Junio.txt con información de nginx

directorio de mern_4 my-express-app con indicaciones para montar contenedor con express
***************
Para que al dar F5 estando en cualquier ruta como pueda ser https://calendar2-6wyj.onrender.com/holidays el navegador
no nos devuelva NOT FOUND

En Render tenemos que configurar en frontend el apartado Redirect/Rewrite con los siguiente parámetros
    - Usando react
        Source:	/
        Destination: /index.html
        Action:	Rewrite
    - Usando Vite
        Source:	/*
        Destination: /index.html
        Action:	Rewrite

***************
PARA ENVÍO DE CORREO ELECTRONICO DESDE BACKEND
EN BACKEND
    npm install @sendgrid/mail
DARSE ALTA EN SENDGRID (es twilio product)
Una vez logeado
CREAR API KEY en 
    SETTINGS - API KEY
Luego añadimos la dirección de correo origen del email
    SETTINGS
        sender autentication
        Aparecerá una nueva pantalla en la que uno de los botones pondrá
            VERIFY A SINGLE sender
            Lo que nos permitirá meter una dirección de mail que usaremos como origen del email
            Que luego tendremos que verificar, lo cual haremos al crearla, ya recibiremos un email que tengremos que contestar
        También tendremos que hacer un domain autentication para que el receptor de los correos no reciba un aviso de 
        correo no verificado
            DOMAIN AUTHENTICACION
            Verifica el dominio en SendGrid
            Para que los correos no aparezcan como "NO VERIFICADO", debes verificar que el dominio erroak.sartu.org esté autenticado en tu cuenta de SendGrid.
            Pasos:
            Entra en https://app.sendgrid.com/settings/sender_auth
            En la sección "Domain Authentication", haz clic en "Get Started".
            Selecciona tu proveedor de DNS (por ejemplo, Cloudflare, GoDaddy, etc.).
            Ingresa el dominio: erroak.sartu.org.
            SendGrid te dará varios registros DNS (como CNAME) que debes añadir en el panel DNS de tu dominio.
            Una vez añadidos, vuelve a SendGrid y haz clic en "Verify".
            ✅ Importante: Este paso puede tardar un poco en propagarse (hasta 24h), pero normalmente es rápido.


